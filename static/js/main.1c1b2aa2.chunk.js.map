{"version":3,"sources":["../../src/hooks/utils/getFieldFromContext.ts","../../src/hooks/useGoogleFormContext.tsx","../../src/hooks/utils/useCustomOptionField.ts","../../src/hooks/useGoogleForm.ts","../../src/hooks/utils/useTextInput.ts","../../src/hooks/utils/useGridInput.ts","../../src/hooks/useDropdownInput.ts","../../src/hooks/useLinearInput.ts","components/CheckboxInput.js","../../src/hooks/useCheckboxInput.ts","components/RadioInput.js","../../src/hooks/useRadioInput.ts","components/ShortAnswerInput.js","../../src/hooks/useShortAnswerInput.ts","components/LongAnswerInput.js","../../src/hooks/useLongAnswerInput.ts","components/RadioGridInput.js","../../src/hooks/useRadioGridInput.ts","components/CheckboxGridInput.js","../../src/hooks/useCheckboxGridInput.ts","components/DropdownInput.js","components/LinearGrid.js","App.js","index.jsx"],"names":["context","Error","field","id","GoogleFormContext","React","useGoogleFormContext","GoogleFormProvider","other","value","OTHER_OPTION","getFieldFromContext","useState","register","options","required","currentValue","useEffect","setCustomInputRequired","nonCustomOptions","o","buildId","slugify","result","registerOption","label","customOption","customOptionId","buildCustomFieldId","error","registerCustomInput","useGoogleForm","form","methods","useForm","fieldIndex","resolveField","submitToGoogleForms","a","fields","Object","key","formData","params","skipNull","skipEmptyString","action","headers","lineId","newErrors","fieldError","l","acc","setErrors","renderGrid","render","renderColumns","c","registerColumn","registerLine","errors","useDropdownInput","useLinearInput","Container","styled","div","CheckboxContainer","CheckboxInput","useCustomOptionField","useCheckboxInput","map","type","htmlFor","placeholder","ErrorLabel","span","RadioInput","useRadioInput","ShortAnswerInput","useTextInput","useShortAnswerInput","LongAnswerInput","useLongAnswerInput","GridQuestionContainer","TableHeader","header","TableRow","TableCell","RadioGridInput","useGridInput","useRadioGridInput","columns","CheckboxGridInput","useCheckboxGridInput","DropdownInput","legend","labelFirst","labelLast","Form","QuestionContainer","QuestionLabel","h3","Questions","questionInput","App","onSubmit","data","console","log","alert","formState","handleSubmit","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1c1b2aa2.chunk.js","sourcesContent":["import { UseGoogleFormReturn, FieldTypes } from '../../types'\n\nexport default (\n  context: UseGoogleFormReturn | null,\n  id: string,\n  type: FieldTypes\n) => {\n  if (context === null) {\n    throw new Error('You need to wrap your form with a GoogleFormProvider')\n  }\n\n  const field = context.getField(id)\n\n  if (field.type !== type) {\n    throw new Error(`Field with id ${field.id} is not of type ${type}`)\n  }\n\n  return field\n}\n","import * as React from 'react'\nimport { UseGoogleFormReturn } from '../types'\n\nconst GoogleFormContext = React.createContext<UseGoogleFormReturn | null>(null)\nexport const useGoogleFormContext = () => React.useContext(GoogleFormContext)\n\nexport const GoogleFormProvider = ({\n  children,\n  ...other\n}: {\n  children: React.ReactNode\n}) => {\n  return (\n    <GoogleFormContext.Provider value={other as UseGoogleFormReturn}>\n      {children}\n    </GoogleFormContext.Provider>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport slugify from 'slugify'\n\nimport {\n  UseCustomOptionReturn,\n  Option,\n  BaseField,\n  UseCustomOptionField,\n  CustomOptionField\n} from '../../types'\nimport getFieldFromContext from './getFieldFromContext'\nimport { useGoogleFormContext } from '../useGoogleFormContext'\nimport { RegisterOptions } from 'react-hook-form'\n\nexport const OTHER_OPTION = '__other_option__'\nexport const OTHER_OPTION_RESPONSE = 'other_option_response'\n\nexport const buildCustomFieldId = (id: string) => {\n  return `${id}-${OTHER_OPTION_RESPONSE}`\n}\n\nexport default (\n  id: string,\n  type: 'CHECKBOX' | 'RADIO'\n): UseCustomOptionField => {\n  const context = useGoogleFormContext()\n  const field = getFieldFromContext(context, id, type) as CustomOptionField\n\n  const [customInputRequired, setCustomInputRequired] = useState<boolean>(false)\n\n  const register = (options?: RegisterOptions) =>\n    context!.register(id, { required: field.required, ...options })\n\n  const currentValue = context!.watch(id)\n\n  useEffect(() => {\n    if (field.type === 'RADIO') {\n      setCustomInputRequired(\n        field.required && currentValue && currentValue === OTHER_OPTION\n      )\n    } else {\n      setCustomInputRequired(\n        field.required &&\n          currentValue &&\n          currentValue.length === 1 &&\n          currentValue.includes(OTHER_OPTION)\n      )\n    }\n  }, [currentValue, customInputRequired])\n\n  const nonCustomOptions = field.options.filter(\n    (o) => !o.custom\n  ) as Array<Option>\n\n  const buildId = (value: string) => {\n    return `${id}-${slugify(value)}`\n  }\n\n  const buildOptionRegister = (o: Option) => {\n    const id = buildId(o.label)\n    const registerOption = (options: RegisterOptions) => ({\n      ...register({ ...options }),\n      value: o.label\n    })\n\n    return {\n      ...o,\n      id,\n      registerOption\n    }\n  }\n\n  const result = {\n    options: nonCustomOptions.map(buildOptionRegister)\n  } as UseCustomOptionReturn\n\n  const customOption = field.options.find((o) => o.custom) as Option\n  if (customOption) {\n    const id = buildId(OTHER_OPTION)\n    const registerOption = (options = {}) => ({\n      ...register({ ...options }),\n      value: OTHER_OPTION\n    })\n\n    const customOptionId = buildCustomFieldId(id)\n\n    const registerCustomInput = (options = {}) => {\n      return context!.register(customOptionId, {\n        required: customInputRequired,\n        ...options\n      })\n    }\n\n    const error = context!.formState.errors[customOptionId]\n\n    result.customOption = {\n      ...customOption,\n      id,\n      registerOption,\n      registerCustomInput,\n      error\n    }\n  }\n\n  const error = context!.formState.errors[field.id]\n\n  return {\n    ...(field as BaseField),\n    ...result,\n    error\n  }\n}\n","import { useForm } from 'react-hook-form'\nimport queryString from 'query-string'\nimport axios from 'axios'\n\nimport {\n  OTHER_OPTION,\n  OTHER_OPTION_RESPONSE\n} from './utils/useCustomOptionField'\nimport { GoogleForm, UseGoogleFormReturn } from '../types'\n\nconst GOOGLE_FORMS_URL = 'https://docs.google.com/forms/d'\n\nconst resolveField = (id: string, form: GoogleForm) => {\n  const fieldIndex = form.fieldsOrder[id]\n\n  if (fieldIndex === undefined) {\n    throw new Error(`Field with id ${id} wasn't found in your form`)\n  }\n\n  const field = form.fields[fieldIndex]\n  return field\n}\n\nexport const formatQuestionName = (id: string) => {\n  if (id.includes(OTHER_OPTION_RESPONSE)) {\n    return `entry.${id.replace(\n      `-${OTHER_OPTION}-${OTHER_OPTION_RESPONSE}`,\n      ''\n    )}.${OTHER_OPTION_RESPONSE}`\n  }\n\n  return `entry.${id}`\n}\n\nexport const useGoogleForm = ({ form }: { form: GoogleForm }) => {\n  const methods = useForm() as UseGoogleFormReturn\n\n  methods.getField = (id: string) => resolveField(id, form)\n\n  const submitToGoogleForms = async (formData: object) => {\n    const fields = {}\n    Object.keys(formData).forEach((key) => {\n      fields[formatQuestionName(key)] = formData[key]\n    })\n\n    const params = queryString.stringify(fields, {\n      skipNull: true,\n      skipEmptyString: true\n    })\n\n    try {\n      await axios.get(\n        `${GOOGLE_FORMS_URL}/${form.action}/formResponse?${params}&submit=Submit`,\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        }\n      )\n    } catch (err) {\n      // We need to catch the error here because of CORS\n      // However the form will still be submitted to Google Forms if every field is correct\n      // Otherwise we don't have observability if the form submission failed.\n      // TODO: we could implement the suggestion on this stackoverflow about having an invisible iframe\n      // to perform the submission https://stackoverflow.com/a/61359999/13194919\n      return\n    }\n  }\n\n  methods.submitToGoogleForms = submitToGoogleForms\n\n  return methods\n}\n","import { RegisterOptions } from 'react-hook-form'\n\nimport { UseTextFieldReturn, TextField } from '../../types'\nimport { useGoogleFormContext } from '../useGoogleFormContext'\nimport getFieldFromContext from './getFieldFromContext'\n\nexport default (\n  id: string,\n  fieldType: 'LONG_ANSWER' | 'SHORT_ANSWER'\n): UseTextFieldReturn => {\n  const context = useGoogleFormContext()\n\n  const field = getFieldFromContext(context, id, fieldType) as TextField\n\n  const error = context!.formState.errors[field.id]\n\n  const register = (options?: RegisterOptions) =>\n    context!.register(id, { required: field.required, ...options })\n\n  return { ...field, register, error }\n}\n","import { useEffect, useState } from 'react'\nimport { RegisterOptions } from 'react-hook-form'\nimport slugify from 'slugify'\n\nimport { useGoogleFormContext } from '../useGoogleFormContext'\nimport getFieldFromContext from './getFieldFromContext'\nimport {\n  UseGridFieldReturn,\n  GridField,\n  RenderLineFunction,\n  RenderColumnFunction,\n  GridErrors\n} from '../../types'\n\nexport default (\n  id: string,\n  type: 'RADIO_GRID' | 'CHECKBOX_GRID'\n): UseGridFieldReturn => {\n  const context = useGoogleFormContext()\n  const [errors, setErrors] = useState<GridErrors | undefined>(undefined)\n\n  const field = getFieldFromContext(context, id, type) as GridField\n\n  const buildId = (lineId: string, value: string) => {\n    return `${id}-${lineId}-${slugify(value)}`\n  }\n\n  useEffect(() => {\n    const newErrors: GridErrors = field.lines.reduce((acc: GridErrors, l) => {\n      const fieldError = context!.formState.errors[l.id]\n      if (fieldError) {\n        acc[l.id] = fieldError\n      }\n      return acc\n    }, {})\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors)\n    } else {\n      setErrors(undefined)\n    }\n  }, [context!.formState.errors])\n\n  const renderGrid = (render: RenderLineFunction): JSX.Element[] => {\n    return field.lines.map((l) => {\n      const registerLine = (options?: RegisterOptions) =>\n        context!.register(l.id, { required: field.required, ...options })\n\n      const renderColumns = (render: RenderColumnFunction): JSX.Element[] => {\n        return field.columns.map((c) => {\n          const id = buildId(l.id, c.label)\n          const registerColumn = (options?: RegisterOptions) => ({\n            ...registerLine(options),\n            value: c.label\n          })\n\n          return render({ ...c, registerColumn, id })\n        })\n      }\n\n      return render({ ...l, renderColumns })\n    })\n  }\n\n  return { ...field, renderGrid, errors }\n}\n","import slugify from 'slugify'\n\nimport { useGoogleFormContext } from './useGoogleFormContext'\nimport getFieldFromContext from './utils/getFieldFromContext'\nimport { UseDropdownReturn, DropdownField } from '../types'\nimport { RegisterOptions } from 'react-hook-form'\n\nexport const useDropdownInput = (id: string): UseDropdownReturn => {\n  const context = useGoogleFormContext()\n\n  const field = getFieldFromContext(context, id, 'DROPDOWN') as DropdownField\n\n  const register = (options?: RegisterOptions) =>\n    context!.register(id, { required: field.required, ...options })\n\n  const error = context!.formState.errors[field.id]\n\n  const buildId = (value: string) => {\n    return `${field.id}-${slugify(value)}`\n  }\n\n  const options = field.options.map((o) => {\n    const id = buildId(o.label)\n    return {\n      ...o,\n      id\n    }\n  })\n\n  return { ...field, options, register, error }\n}\n","import slugify from 'slugify'\nimport { RegisterOptions } from 'react-hook-form'\n\nimport { useGoogleFormContext } from './useGoogleFormContext'\nimport getFieldFromContext from './utils/getFieldFromContext'\nimport { UseLinearInputReturn, LinearField } from '../types'\n\nexport const useLinearInput = (id: string): UseLinearInputReturn => {\n  const context = useGoogleFormContext()\n\n  const field = getFieldFromContext(context, id, 'LINEAR') as LinearField\n\n  const register = (options?: RegisterOptions) =>\n    context!.register(id, { required: field.required, ...options })\n\n  const buildId = (value: string) => {\n    return `${field.id}-${slugify(value)}`\n  }\n\n  const error = context!.formState.errors[field.id]\n\n  const options = field.options.map((o) => {\n    const id = buildId(o.label)\n    const registerOption = (options?: RegisterOptions) => ({\n      ...register(options),\n      value: o.label\n    })\n\n    return {\n      ...o,\n      id,\n      registerOption\n    }\n  })\n\n  return { ...field, options, error }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { useCheckboxInput } from 'react-google-forms'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n\n  & label {\n    margin: 0 10px;\n  }\n`\n\nexport default function CheckboxInput({ id }) {\n  const { options, customOption } = useCheckboxInput(id)\n\n  return (\n    <Container>\n      {options.map((o) => (\n        <CheckboxContainer key={o.id}>\n          <input type='checkbox' id={o.id} {...o.registerOption()} />\n          <label htmlFor={o.id}>{o.label}</label>\n        </CheckboxContainer>\n      ))}\n      {customOption && (\n        <CheckboxContainer>\n          <input\n            type='checkbox'\n            id={customOption.id}\n            {...customOption.registerOption()}\n          />\n          <label htmlFor={customOption.id}>Outra</label>\n          <input\n            type='text'\n            placeholder='Resposta aqui'\n            {...customOption.registerCustomInput()}\n          />\n        </CheckboxContainer>\n      )}\n    </Container>\n  )\n}\n","import useCustomOptionField from './utils/useCustomOptionField'\nimport { UseCustomOptionField } from '../types'\n\nexport const useCheckboxInput = (id: string): UseCustomOptionField => {\n  return useCustomOptionField(id, 'CHECKBOX')\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { useRadioInput } from 'react-google-forms'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n\n  & label {\n    margin: 0 10px;\n  }\n`\n\nconst ErrorLabel = styled.span`\n  color: red;\n  padding: 10px 0;\n`\n\nexport default function RadioInput({ id }) {\n  const { options, customOption, error } = useRadioInput(id)\n\n  return (\n    <Container>\n      {options.map((o) => (\n        <CheckboxContainer key={o.id}>\n          <input type='radio' id={o.id} {...o.registerOption()} />\n          <label htmlFor={o.id}>{o.label}</label>\n        </CheckboxContainer>\n      ))}\n      {customOption && (\n        <CheckboxContainer>\n          <input\n            type='radio'\n            id={customOption.id}\n            {...customOption.registerOption()}\n          />\n          <label htmlFor={customOption.id}>Outra</label>\n          <input\n            type='text'\n            placeholder='Resposta aqui'\n            {...customOption.registerCustomInput()}\n          />\n        </CheckboxContainer>\n      )}\n      <ErrorLabel>{error && 'This field is required'}</ErrorLabel>\n    </Container>\n  )\n}\n","import useCustomOptionField from './utils/useCustomOptionField'\nimport { UseCustomOptionField } from '../types'\n\nexport const useRadioInput = (id: string): UseCustomOptionField => {\n  return useCustomOptionField(id, 'RADIO')\n}\n","import React from 'react'\n\nimport { useShortAnswerInput } from 'react-google-forms'\n\nexport default function ShortAnswerInput({ id }) {\n  const { register } = useShortAnswerInput(id)\n\n  return (\n    <div>\n      <input type='text' {...register()} />\n    </div>\n  )\n}\n","import useTextInput from './utils/useTextInput'\n\nexport const useShortAnswerInput = (id: string) => {\n  return useTextInput(id, 'SHORT_ANSWER')\n}\n","import React from 'react'\n\nimport { useLongAnswerInput } from 'react-google-forms'\n\nexport default function LongAnswerInput({ id }) {\n  const { register } = useLongAnswerInput(id)\n\n  return (\n    <div>\n      <textarea type='text' {...register()} />\n    </div>\n  )\n}\n","import useTextInput from './utils/useTextInput'\n\nexport const useLongAnswerInput = (id: string) => {\n  return useTextInput(id, 'LONG_ANSWER')\n}\n","import React from 'react'\nimport { useRadioGridInput } from 'react-google-forms'\nimport styled from 'styled-components'\n\nconst GridQuestionContainer = styled.div`\n  display: table;\n`\n\nconst TableHeader = styled.header`\n  display: table-row;\n`\n\nconst TableRow = styled.div`\n  display: table-row;\n`\n\nconst TableCell = styled.div`\n  display: table-cell;\n  padding: 5px;\n`\n\nexport default function RadioGridInput({ id }) {\n  const { columns, renderGrid } = useRadioGridInput(id)\n\n  return (\n    <GridQuestionContainer>\n      <TableHeader>\n        <TableCell />\n        {columns.map((c) => (\n          <TableCell key={c.label}>{c.label}</TableCell>\n        ))}\n      </TableHeader>\n      {renderGrid((l) => (\n        <TableRow key={l.label}>\n          <TableCell>{l.label}</TableCell>\n          {l.renderColumns((c) => (\n            <TableCell key={c.label}>\n              <input type='radio' {...c.registerColumn()} />\n            </TableCell>\n          ))}\n        </TableRow>\n      ))}\n    </GridQuestionContainer>\n  )\n}\n","import useGridInput from './utils/useGridInput'\n\nexport const useRadioGridInput = (id: string) => {\n  return useGridInput(id, 'RADIO_GRID')\n}\n","import React from 'react'\nimport { useCheckboxGridInput } from 'react-google-forms'\nimport styled from 'styled-components'\n\nconst GridQuestionContainer = styled.div`\n  display: table;\n`\n\nconst TableHeader = styled.header`\n  display: table-row;\n`\n\nconst TableRow = styled.div`\n  display: table-row;\n`\n\nconst TableCell = styled.div`\n  display: table-cell;\n  padding: 5px;\n`\n\nexport default function CheckboxGridInput({ id }) {\n  const { columns, renderGrid } = useCheckboxGridInput(id)\n\n  return (\n    <GridQuestionContainer>\n      <TableHeader>\n        <TableCell />\n        {columns.map((c) => (\n          <TableCell key={c.label}>{c.label}</TableCell>\n        ))}\n      </TableHeader>\n      {renderGrid((l) => (\n        <TableRow key={l.label}>\n          <TableCell>{l.label}</TableCell>\n          {l.renderColumns((c) => (\n            <TableCell key={c.label}>\n              <input type='checkbox' {...c.registerColumn()} />\n            </TableCell>\n          ))}\n        </TableRow>\n      ))}\n    </GridQuestionContainer>\n  )\n}\n","import useGridInput from './utils/useGridInput'\n\nexport const useCheckboxGridInput = (id: string) => {\n  return useGridInput(id, 'CHECKBOX_GRID')\n}\n","import React from 'react'\n\nimport { useDropdownInput } from 'react-google-forms'\n\nexport default function DropdownInput({ id }) {\n  const { register, options } = useDropdownInput(id)\n\n  return (\n    <div>\n      <select {...register()}>\n        <option value=''>Select option</option>\n        {options.map((o) => {\n          return (\n            <option key={o.label} value={o.label}>\n              {o.label}\n            </option>\n          )\n        })}\n      </select>\n    </div>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { useLinearInput } from 'react-google-forms'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  & * {\n    margin: 0 10px;\n  }\n  margin-bottom 10px;\n`\n\nconst ErrorLabel = styled.span`\n  color: red;\n`\n\nexport default function ShortAnswerInput({ id }) {\n  const { options, legend, error } = useLinearInput(id)\n\n  return (\n    <>\n      <Container>\n        <div>{legend.labelFirst}</div>\n        {options.map((o) => {\n          return <input key={o.id} type='radio' {...o.registerOption()} />\n        })}\n        <div>{legend.labelLast}</div>\n      </Container>\n      <ErrorLabel>{error && 'This field is required'}</ErrorLabel>\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GoogleFormProvider, useGoogleForm } from 'react-google-forms'\n\nimport form from './scripts/form.json'\n\nimport CheckboxInput from './components/CheckboxInput'\nimport RadioInput from './components/RadioInput'\nimport ShortAnswerInput from './components/ShortAnswerInput'\nimport LongAnswerInput from './components/LongAnswerInput'\nimport RadioGridInput from './components/RadioGridInput'\nimport CheckboxGridInput from './components/CheckboxGridInput'\nimport DropdownInput from './components/DropdownInput'\nimport LinearGrid from './components/LinearGrid'\n\nconst Form = styled.form`\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 50px 0;\n`\n\nconst QuestionContainer = styled.div`\n  margin-bottom: 20px;\n`\n\nconst QuestionLabel = styled.h3`\n  margin-bottom: 10px;\n`\n\nconst Questions = () => {\n  return (\n    <div>\n      {form.fields.map((field) => {\n        const { id } = field\n\n        let questionInput = null\n        switch (field.type) {\n          case 'CHECKBOX':\n            questionInput = <CheckboxInput id={id} />\n            break\n          case 'RADIO':\n            questionInput = <RadioInput id={id} />\n            break\n          case 'SHORT_ANSWER':\n            questionInput = <ShortAnswerInput id={id} />\n            break\n          case 'LONG_ANSWER':\n            questionInput = <LongAnswerInput id={id} />\n            break\n          case 'RADIO_GRID':\n            questionInput = <RadioGridInput id={id} />\n            break\n          case 'CHECKBOX_GRID':\n            questionInput = <CheckboxGridInput id={id} />\n            break\n          case 'DROPDOWN':\n            questionInput = <DropdownInput id={id} />\n            break\n          case 'LINEAR':\n            questionInput = <LinearGrid id={id} />\n            break\n        }\n\n        if (!questionInput) {\n          return null\n        }\n\n        return (\n          <QuestionContainer key={id}>\n            <QuestionLabel>{field.label}</QuestionLabel>\n            {questionInput}\n          </QuestionContainer>\n        )\n      })}\n    </div>\n  )\n}\n\nconst App = () => {\n  const methods = useGoogleForm({ form })\n  const onSubmit = async (data) => {\n    console.log('>>> Here is the data', data)\n    await methods.submitToGoogleForms(data)\n    alert('Form submitted with success!')\n  }\n\n  console.log('>>> Here are the errors!!!', methods.formState.errors)\n\n  return (\n    <GoogleFormProvider {...methods}>\n      <Form onSubmit={methods.handleSubmit(onSubmit)}>\n        <Questions />\n        <button type='submit'>Submeter</button>\n      </Form>\n    </GoogleFormProvider>\n  )\n}\n\nexport default App\n","/* global document */\nimport './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}